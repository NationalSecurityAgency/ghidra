
@include "Scalar_SPFP.sinc"
@ifdef IS_ISA
@include "SPE_APU.sinc"
@endif

define pcodeop vectorExclusiveOr;
define pcodeop vectorMergeHigh;
define pcodeop vectorMergeLow;
define pcodeop vectorLoadDoubleWordIntoDoubleWordIndexed;
define pcodeop vectorStoreDoubleOfDoubleIndexed;
define pcodeop initializeAccumulator;
define pcodeop vectorShiftRightWordSigned;
define pcodeop vectorShiftRightWordUnsigned;

:evxor vrD_64_0,vrA_64_0,vrB_64_0        is OP=4 & vrD_64_0 & vrA_64_0 & vrB_64_0 & XOP_0_10=534
{
    vrD_64_0 = vrA_64_0 ^ vrB_64_0;
}

@if REGISTER_SIZE=="8"
:evmergehi S,A,B        is OP=4 & S & A & B & XOP_0_10=556
{
	S[32,32] = A[32,32];
	S[ 0,32] = B[ 0,32];
}

:evmergelo S,A,B        is OP=4 & S & A & B & XOP_0_10=557
{
	S[32,32] = A[0,32];
	S[ 0,32] = B[0,32];
}
@endif


:evldd RT,dUI16PlusRAOrZeroAddress is OP=4 & RT & dUI16PlusRAOrZeroAddress & XOP_0_10=769
{
   ea:$(REGISTER_SIZE) = dUI16PlusRAOrZeroAddress;
   RT = *:8 ($(EATRUNC));
}

:evlddx RT,RA_OR_ZERO,RB is OP=4 & RT & RA_OR_ZERO & RB & XOP_0_10=768
{
    ea:$(REGISTER_SIZE) = RA_OR_ZERO + RB;
    RT = *:8 ($(EATRUNC));
}

@if REGISTER_SIZE=="8"
@ifndef IS_ISA
:evsrws S,A,B        is OP=4 & S & A & B & XOP_0_10=545
{
	local low:4 = A[0,32];
	local high:4 = A[32,32];
	local low_shift:1 = B[0,5];
	local high_shift:1 = B[32,5];
	S[0,32] = low s>> zext(low_shift);
	S[32,32] = high s>> zext(high_shift);
}
@endif

@ifndef IS_ISA
:evsrwu S,A,B        is OP=4 & S & A & B & XOP_0_10=544
{
	local low:4 = A[0,32];
	local high:4 = A[32,32];
	local low_shift:1 = B[0,5];
	local high_shift:1 = B[32,5];
	S[0,32] = low >> zext(low_shift);
	S[32,32] = high >> zext(high_shift);
}
@endif
@endif

:evstdd RS,dUI16PlusRAOrZeroAddress is OP=4 & RS & dUI16PlusRAOrZeroAddress & XOP_0_10=801 
{
   ea:$(REGISTER_SIZE) = dUI16PlusRAOrZeroAddress;
   *:8 ($(EATRUNC)) = RS;
}

:evstddx RS,RA_OR_ZERO,RB        is OP=4 & RS & RA_OR_ZERO & RB & XOP_0_10=800
{
    ea:$(REGISTER_SIZE) = RA_OR_ZERO + RB;
    *:8 ($(EATRUNC)) = RS;
}

:evmra RT,RA        is OP=4 & RT & RA & BITS_11_15=0 & XOP_0_10=1220
{
	ACC = zext(RA);
	RT = RA;
}

@if REGISTER_SIZE=="8"
# evmergehilo rD,rA,rB 010 0010 1110
:evmergehilo S,A,B is OP=4 & S & A & B & XOP_0_10=558 {
	S[32,32] = A[32,32];
	S[ 0,32] = B[ 0,32];

}

# evmergelohi rD,rA,rB 010 0010 1111
:evmergelohi S,A,B is OP=4 & S & A & B & XOP_0_10=559 {
 	S[32,32] = A[ 0,32];
	S[ 0,32] = B[32,32];
}
@endif

# evstwwe rS,rA,UIMM 011 0011 1001
:evstwwe RS,dUI16PlusRAOrZeroAddress is OP=4 & RS & dUI16PlusRAOrZeroAddress & XOP_0_10=0x339
{
   ea:$(REGISTER_SIZE) = dUI16PlusRAOrZeroAddress;
   *:4 ($(EATRUNC)) = RS:4;
}

# evstwwex rS,rA,rB 011 0011 1000
:evstwwex RS,RA_OR_ZERO,RB is OP=4 & RS & RA_OR_ZERO & RB & XOP_0_10=0x338
{
    ea:$(REGISTER_SIZE) = RA_OR_ZERO + RB;
    *:4 ($(EATRUNC)) = RS:4;
}

:lvx vrD, RA_OR_ZERO, RB  is OP=31 & vrD & RA_OR_ZERO & RB & XOP_1_10=103 & BIT_0=0
{
    ea:$(REGISTER_SIZE) = RA_OR_ZERO + RB;
    vrD = *:16 ($(EATRUNC));
}

:stvx vrS, RA_OR_ZERO, RB  is OP=31 & vrS & RA_OR_ZERO & RB & XOP_1_10=231 & BIT_0=0
{
    ea:$(REGISTER_SIZE) = RA_OR_ZERO + RB;
    *:16 ($(EATRUNC)) = vrS;
}


