<?xml version="1.0" encoding="UTF-8"?>

<compiler_spec>
  <data_organization>
     <absolute_max_alignment value="0" />
     <machine_alignment value="2" />
     <default_alignment value="1" />
     <default_pointer_alignment value="4" />
     <pointer_size value="8" />
     <wchar_size value="4" />
     <short_size value="2" />
     <integer_size value="4" />
     <long_size value="4" />
     <long_long_size value="8" />
     <float_size value="4" />
     <double_size value="8" />
     <long_double_size value="16" />
     <size_alignment_map>
          <entry size="1" alignment="1" />
          <entry size="2" alignment="2" />
          <entry size="4" alignment="4" />
          <entry size="8" alignment="4" />
          <entry size="16" alignment="4" />
     </size_alignment_map>
  </data_organization>
  <global>
    <range space="ram"/>
  </global>
  <stackpointer register="sp" space="ram"/>
  <default_proto>
    <prototype name="__stdcall" extrapop="0" stackshift="0">
      <input>
        <pentry minsize="8" maxsize="8" storage="hiddenret">
          <addr offset="0x7ef" space="stack"/>  <!-- hidden return storage is pointer in callers area of the stack -->
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd0"/>
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd2"/>
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd4"/>
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd6"/>
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd8"/>
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd10"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o0"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o1"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o2"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o3"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o4"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o5"/>
        </pentry>
        <pentry minsize="1" maxsize="500" align="8">
          <addr offset="0x8af" space="stack"/>   <!-- Big offset is due to SPARC 64-bit "stack bias" -->
        </pentry>
		<rule>
		  <datatype name="struct"/>
		  <convert_to_ptr/>
		</rule>
		<rule>
          <datatype name="float" minsize="4" maxsize="8"/>
          <consume storage="float"/>
          <consume_extra storage="general"/>  <!-- if consume a float slot, must consume an integer slot -->
        </rule>
		<rule>
          <datatype name="float" minsize="16" maxsize="16"/>
          <join storage="float"/>
          <consume_extra storage="general"/>  <!-- if join two float slots, must skip two integer slots -->
          <consume_extra storage="general"/>
        </rule>
        <rule>
          <datatype name="any"/>
          <join storage="general"/>
          <consume_extra storage="float"/> <!-- if consume an integer slot, must consume a float slot -->
        </rule>
      </input>
      <output>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd0"/>
        </pentry>
        <pentry minsize="4" maxsize="8" metatype="float">
          <register name="fd2"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="o0"/>
        </pentry>
        <rule>
          <datatype name="struct"/>
	      <hidden_return/>
	    </rule>
	    <rule>
	      <datatype name="float" minsize="8" maxsize="16"/>
	      <join storage="float"/>
	    </rule>
      </output>
      <unaffected>
        <register name="g0"/>
        <register name="g1"/>
        <register name="g2"/>
        <register name="g3"/>
        <register name="g4"/>
        <register name="g5"/>
        <register name="g6"/>
        <register name="g7"/>
        <register name="l0"/>
        <register name="l1"/>
        <register name="l2"/>
        <register name="l3"/>
        <register name="l4"/>
        <register name="l5"/>
        <register name="l6"/>
        <register name="l7"/>
        <register name="i0"/>
        <register name="i1"/>
        <register name="i2"/>
        <register name="i3"/>
        <register name="i4"/>
        <register name="i5"/>
        <register name="fp"/>
        <register name="i7"/>
        <register name="sp"/>
        <register name="didrestore"/>
      </unaffected>
      <localrange>
        <range space="stack" first="0xfff0bdc1" last="0xffffffff"/>
        <range space="stack" first="0x0" last="0x8ae"/>   <!-- Stack bias of 7FF + 0xb0 window size -->
      </localrange>
    </prototype>
  </default_proto>
  
      <prototype name="__nonwindowcall" extrapop="0" stackshift="0">
      <input>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g1"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g2"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g3"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g4"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g5"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g6"/>
        </pentry>
        <pentry minsize="1" maxsize="500" align="8">
           <addr offset="0x8af" space="stack"/>   <!-- Big offset is due to SPARC 64-bit "stack bias" -->
        </pentry>
      </input>
      <output>
        <pentry minsize="4" maxsize="4" metatype="float">
          <register name="fs0"/>
        </pentry>
        <pentry minsize="8" maxsize="8" metatype="float">
          <register name="fd0"/>
        </pentry>
        <pentry minsize="16" maxsize="16" metatype="float">
          <register name="fq0"/>
        </pentry>
        <pentry minsize="1" maxsize="8" extension="inttype">
          <register name="g0"/>
        </pentry>
      </output>
      <unaffected>
        <register name="g0"/>
        <register name="g1"/>
        <register name="g2"/>
        <register name="g3"/>
        <register name="g4"/>
        <register name="g5"/>
        <register name="g6"/>
        <register name="g7"/>
        <register name="l0"/>
        <register name="l1"/>
        <register name="l2"/>
        <register name="l3"/>
        <register name="l4"/>
        <register name="l5"/>
        <register name="l6"/>
        <register name="l7"/> 
        <register name="i0"/>
        <register name="i1"/>
        <register name="i2"/>
        <register name="i3"/>
        <register name="i4"/>
        <register name="i5"/>
        <register name="fp"/>
        <register name="i7"/>
        <register name="sp"/>
        <register name="didrestore"/>
      </unaffected>
      <localrange>
        <range space="stack" first="0xfff0bdc1" last="0xffffffff"/>
        <range space="stack" first="0x0" last="0x8ae"/>   <!-- Stack bias of 7FF + 0xb0 window size -->
      </localrange>
    </prototype>
    
  <callfixup name="sparc_get_pc_thunk.l7">
    <target name="__sparc_get_pc_thunk.l7"/>
    <pcode>
      <body><![CDATA[
      l7 = o7 + l7;
      ]]></body>
    </pcode>
  </callfixup>
  
  <callfixup name="sparc_get_pc_thunk.g1">
    <target name="__sparc_get_pc_thunk.g1"/>
    <pcode>
      <body><![CDATA[
      g1 = o7 + g1;
      ]]></body>
    </pcode>
  </callfixup>

  <callfixup name="sparc_get_pc_thunk.o0">
    <target name="__sparc_get_pc_thunk.o0"/>
    <pcode>
      <body><![CDATA[
      o0 = o7 + o0;
      ]]></body>
    </pcode>
  </callfixup>  
  
</compiler_spec>
